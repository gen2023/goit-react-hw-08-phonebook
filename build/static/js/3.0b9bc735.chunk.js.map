{"version":3,"sources":["redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/Modal/Modal.js","components/ContactsForm/ContactsForm.js","components/ContactList/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","pages/PhonebookPage.js"],"names":["name","number","dispatch","contact","saveContactRequest","axios","post","then","data","saveContactSuccess","catch","error","saveContactError","message","contactId","removeContactRequest","delete","removeContactSuccess","removeContactError","listContactRequest","get","listContactSuccess","listContactError","getLoading","state","contacts","loading","getFilter","filter","getAllContact","items","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","modalRoot","document","querySelector","Modal","handleKeyDown","e","code","props","onClose","handleBackdropClick","event","currentTarget","target","window","addEventListener","this","removeEventListener","createPortal","className","onClick","children","Component","ContactsForm","showModal","handleChange","value","setState","handleSubmit","preventDefault","checkedName","find","onContact","closeModal","resetForm","onSubmit","type","placeholder","onChange","connect","contactsOperations","ContactListItem","onRemove","onRemoveContact","id","map","key","handleFilter","changeFilter","PhonebookPage","listContacts","isLoading","Loader"],"mappings":"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","file":"static/js/3.0b9bc735.chunk.js","sourcesContent":["import axios from \"axios\";\nimport {\n  listContactRequest,\n  listContactSuccess,\n  listContactError,\n  saveContactRequest,\n  saveContactSuccess,\n  saveContactError,\n  removeContactRequest,\n  removeContactSuccess,\n  removeContactError,\n} from \"./contacts-actions\";\n\nconst listContacts = () => (dispatch) => {\n  dispatch(listContactRequest());\n\n  axios\n    .get(\"/contacts\")\n    .then(({ data }) => dispatch(listContactSuccess(data)))\n    .catch((error) => dispatch(listContactError(error.message)));\n};\n\nconst saveContact = ({ name, number }) => (dispatch) => {\n  const contact = { name, number };\n\n  dispatch(saveContactRequest());\n\n  axios\n    .post(\"/contacts\", contact)\n    .then(({ data }) => dispatch(saveContactSuccess(data)))\n    .catch((error) => dispatch(saveContactError(error.message)));\n};\n\nconst removeContact = (contactId) => (dispatch) => {\n  dispatch(removeContactRequest());\n\n  axios\n    .delete(`/contacts/${contactId}`)\n    .then(() => dispatch(removeContactSuccess(contactId)))\n    .catch((error) => dispatch(removeContactError(error.message)));\n};\n\nexport default { saveContact, removeContact, listContacts };\n","import { createSelector } from 'reselect';\n\nexport const getLoading = state => state.contacts.loading;\nexport const getFilter = state => state.contacts.filter;\nexport const getAllContact = state => state.contacts.items;\nexport const getVisibleContacts = createSelector(\n  [getAllContact, getFilter],\n  (contacts, filter) => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(normalizedFilter),\n    );\n  },\n);\n","import React, { Component } from 'react';\nimport { createPortal } from 'react-dom';\nimport propTypes from 'prop-types';\nimport './modal.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nclass Modal extends Component {\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      this.props.onClose();\n    }\n  };\n\n  handleBackdropClick = event => {\n    if (event.currentTarget === event.target) {\n      this.props.onClose();\n    }\n  };\n\n  render() {\n    return createPortal(\n      <div className=\"Modal__backdrop\" onClick={this.handleBackdropClick}>\n        <div className=\"Modal__content\">\n          <span>{this.props.children}</span>\n        </div>\n      </div>,\n      modalRoot,\n    );\n  }\n}\nModal.propTypes = {\n  onClose: propTypes.func.isRequired,\n  children: propTypes.string.isRequired,\n};\n\nexport default Modal;\n","import React, { Component } from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getAllContact } from '../../redux/contacts/contacts-selectors';\n\nimport Modal from '../Modal';\n\nimport './ContactsForm.css';\n\nclass ContactsForm extends Component {\n  static propTypes = {\n    onContact: propTypes.func.isRequired,\n    contacts: propTypes.array.isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    message: '',\n    showModal: false,\n  };\n\n  handleChange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    event.preventDefault();\n    const { name, number } = this.state;\n    const { contacts } = this.props;\n    const checkedName = contacts.find(contact => name === contact.name);\n    const { onContact } = this.props;\n\n    if (!name || !number || (!name && !number)) {\n      this.closeModal();\n\n      return this.setState({ message: `Fill in all the fields` });\n    }\n    if (checkedName) {\n      this.closeModal();\n      return this.setState({ message: `${name} is already in contacts` });\n    }\n\n    onContact(this.state);\n    this.resetForm();\n  };\n\n  resetForm() {\n    this.setState({ name: '', number: '' });\n  }\n\n  closeModal = () => {\n    this.setState(({ showModal }) => ({\n      showModal: !showModal,\n    }));\n  };\n\n  render() {\n    const { name, number, message, showModal } = this.state;\n\n    return (\n      <>\n        {showModal && <Modal onClose={this.closeModal}>{message}</Modal>}\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"form-group\">\n            <label>Name</label>\n            <input\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Enter name\"\n              value={name}\n              name=\"name\"\n              onChange={this.handleChange}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Number </label>\n            <input\n              type=\"text\"\n              className=\"input\"\n              placeholder=\"Enter number\"\n              value={number}\n              name=\"number\"\n              onChange={this.handleChange}\n            />\n          </div>\n\n          <button className=\"submit submitAdd\" type=\"submit\">\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    contacts: getAllContact(state),\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onContact: contact => dispatch(contactsOperations.saveContact(contact)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\n","import React from 'react';\nimport propTypes from 'prop-types';\n\nconst ContactListItem = ({ name, number, onRemove }) => (\n  <li className=\"listContacts\">\n    <span className=\"list\">{name}</span>\n    <span className=\"list\"> {number}</span>\n    <button className=\"list\" type=\"button\" onClick={onRemove}>\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  name: propTypes.string.isRequired,\n  number: propTypes.string.isRequired,\n  onRemove: propTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\nimport ContactListItem from './ContactListItem';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\n\nimport './Contact.css';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className=\"contextListContacts\">\n    <header className=\"listContacts\">\n      <span className=\"headerList\">name</span>\n      <span className=\"headerList\">telephone</span>\n      <span className=\"headerList\">action</span>\n    </header>\n\n    {contacts.map(({ id, name, number }) => (\n      <ContactListItem\n        key={id}\n        name={name}\n        number={number}\n        onRemove={() => onRemoveContact(id)}\n      />\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: propTypes.oneOfType([\n    propTypes.arrayOf(\n      propTypes.exact({\n        id: propTypes.string.isRequired,\n        name: propTypes.string.isRequired,\n        number: propTypes.number.isRequired,\n      }),\n    ),\n    propTypes.array,\n  ]),\n  onRemoveContact: propTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  contacts: getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsOperations.removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts/contacts-actions';\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\n\nimport './Filter.css';\n\nconst Filter = ({ value, handleFilter }) => (\n  <div className=\"formFilter\">\n    <div className=\"form-group\">\n      <label>Find contacts by name</label>\n      <input\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Enter name\"\n        value={value}\n        name=\"filter\"\n        onChange={handleFilter}\n      />\n    </div>\n  </div>\n);\n\nFilter.propTypes = {\n  value: propTypes.string.isRequired,\n  handleFilter: propTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleFilter: event => dispatch(changeFilter(event.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport propTypes from 'prop-types';\n\nimport ContactsForm from '../components/ContactsForm';\nimport ContactList from '../components/ContactList';\nimport Filter from '../components/Filter';\n\nimport contactsOperations from '../redux/contacts/contacts-operations';\nimport { getLoading } from '../redux/contacts/contacts-selectors';\n\nimport Loader from '../components/Loader';\n\nclass PhonebookPage extends Component {\n  componentDidMount() {\n    this.props.listContacts();\n  }\n  render() {\n    return (\n      <div className=\"content contentPhonebook\">\n        <div className=\"formPhonebook\">\n          <h1>Phonebook</h1>\n          <ContactsForm />\n        </div>\n\n        <Filter />\n        <div>\n          <h2>Contact</h2>\n          {this.props.isLoading && <Loader />}\n          <ContactList />\n        </div>\n      </div>\n    );\n  }\n}\nPhonebookPage.propTypes = {\n  listContacts: propTypes.func,\n  isLoading: propTypes.bool,\n};\n\nconst mapStateToProps = state => ({\n  isLoading: getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  listContacts: () => dispatch(contactsOperations.listContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PhonebookPage);\n"],"sourceRoot":""}